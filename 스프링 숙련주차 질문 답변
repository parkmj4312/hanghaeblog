1. 처음 설계한 API 명세서에 변경사항이 있었나요?
변경 되었다면 어떤 점 때문 일까요? 첫 설계의 중요성에 대해 작성해 주세요!

처음 설계하고 시작하지 않고 코드를 먼저 짜고 API명세서를 작성하여 특별히 변경사항은 없었습니다.

2. ERD를 먼저 설계한 후 Entity를 개발했을 때 어떤 점이 도움이 되셨나요?

ERD작성하는 툴을 아직 제대로 다루지 못 해서 작성하지 못 했습니다.

3. JWT를 사용하여 인증/인가를 구현 했을 때의 장점은 무엇일까요?

사용자의 로그인 기능을 효과적으로 구현할 수 있었습니다.

4. 반대로 JWT를 사용한 인증/인가의 한계점은 무엇일까요?

시크릿 키 등이 유출되면 사용자의 보안에 문제가 있는 것 같습니다.

5. 댓글이 달려있는 게시글을 삭제하려고 할 때 무슨 문제가 발생할까요? JPA가 아닌 Database 테이블 관점에서 해결방법이 무엇일까요?

댓글 기능은 구현하지 못 했지만 외래키 등이 복합적으로 적용된 테이블의 경우 여러 테이블에서 변경사항이 반영되어야 하는데
해당 댓글 테이블에서만 삭제되면 나머지 테이블에 데이터가 남아서 문제가 생길 수 있을 것 같습니다.
데이터베이스 관점에서 해결하려면 해당 테이블과 연결된 다른 테이블의 변경사항도 반영 되어야 할 것 같습니다.

6. 5번과 같은 문제가 발생했을 때 JPA에서는 어떻게 해결할 수 있을까요?

Many to One 이나 One to Many 어노테이션을 복합적으로 사용하여 해결할 수 있을듯 합니다.

7. IoC / DI 에 대해 간략하게 설명해 주세요!

IOC는 제어의 역전의 줄임말이고 DI는 의존성 주입의 줄임말로

고차원 모듈을 변경을 최소화하고 확장성에 유리하게 코드를 관리하는 기법에 주요한 개념으로 생각합니다.